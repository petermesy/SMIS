// Helper to print a single student report (detailed, with subject scores, academic year, and semester, and 11 columns)
const handlePrintStudentReport = (student, grade, section, className, allSubjects, rankedStudents) => {
  const schoolName = "Sawla International School";
  let academicYear = student.academicYear || '';
  let semester = student.semester || '';
  if (!academicYear || !semester) {
    if (student.grades && student.grades.length > 0) {
      academicYear = student.grades[0].academicYear || '';
      semester = student.grades[0].semester || '';
    } else if (student.semester) {
      semester = student.semester;
    }
  }
  // Build a visually organized, modern print layout for the student report
  const allSubjectNames = allSubjects;
  const avgs = rankedStudents.map(s => s.avg).sort((a, b) => a - b);
  let percentile = '100';
  if (avgs.length > 1) {
    const below = avgs.filter(a => a < student.avg).length;
    const equal = avgs.filter(a => a === student.avg).length;
    percentile = (((below + 0.5 * equal) / avgs.length) * 100).toFixed(1);
  }
  // Student info block
  const infoRows = [
    { label: 'Name', value: `${student.firstName} ${student.lastName}` },
    { label: 'Email', value: student.email },
    { label: 'Grade', value: grade },
    { label: 'Section', value: section },
    { label: 'Class', value: className },
    { label: 'Academic Year', value: academicYear || '-' },
    { label: 'Semester', value: semester || '-' },
    { label: 'Date', value: new Date().toLocaleDateString() },
  ];
  // Subject scores table
  let subjectRows = '';
  allSubjectNames.forEach(subject => {
    const subj = student.subjectMap[subject];
    subjectRows += `<tr>
      <td style='padding:6px 12px;border:1px solid #e0e0e0;'>${subject}</td>
      <td style='padding:6px 12px;border:1px solid #e0e0e0;text-align:center;'>${subj ? subj.totalEarned : ''} / ${subj ? subj.totalPossible : ''}</td>
      <td style='padding:6px 12px;border:1px solid #e0e0e0;text-align:center;'>${subj && subj.totalPossible > 0 ? ((subj.totalEarned / subj.totalPossible) * 100).toFixed(1) + '%' : ''}</td>
    </tr>`;
  });
  // Summary block
  const summaryRows = [
    { label: 'Total Score', value: `${student.totalEarned} / ${student.totalPossible}` },
    { label: 'Average (%)', value: `${student.avg.toFixed(1)}%` },
    { label: 'Rank', value: student.rank },
    { label: 'Percentile', value: percentile },
    { label: 'Grade', value: getLetterGrade(student.avg) },
  ];
  const content = `
    <div style='max-width:700px;margin:32px auto;padding:32px 40px 32px 40px;background:#fff;border-radius:12px;box-shadow:0 2px 16px #0001;font-family:sans-serif;'>
      <div style='text-align:center;margin-bottom:24px;'>
        <h2 style='margin:0;font-size:2rem;font-weight:700;color:#1a237e;'>${schoolName}</h2>
        <h3 style='margin:0;font-size:1.2rem;font-weight:500;color:#333;'>Student Academic Report</h3>
      </div>
      <div style='display:flex;gap:32px;justify-content:space-between;flex-wrap:wrap;margin-bottom:32px;'>
        <div style='flex:1 1 220px;'>
          <h4 style='margin:0 0 8px 0;font-size:1.05rem;color:#1976d2;'>Student Information</h4>
          <table style='width:100%;border-collapse:collapse;'>
            ${infoRows.map(row => `<tr><td style='padding:4px 0 4px 0;color:#555;font-weight:500;width:120px;'>${row.label}:</td><td style='padding:4px 0 4px 0;color:#222;'>${row.value}</td></tr>`).join('')}
          </table>
        </div>
        <div style='flex:1 1 220px;'>
          <h4 style='margin:0 0 8px 0;font-size:1.05rem;color:#1976d2;'>Summary</h4>
          <table style='width:100%;border-collapse:collapse;'>
            ${summaryRows.map(row => `<tr><td style='padding:4px 0 4px 0;color:#555;font-weight:500;width:120px;'>${row.label}:</td><td style='padding:4px 0 4px 0;color:#222;'>${row.value}</td></tr>`).join('')}
          </table>
        </div>
      </div>
      <div style='margin-bottom:24px;'>
        <h4 style='margin:0 0 8px 0;font-size:1.05rem;color:#1976d2;'>Subject Scores</h4>
        <table style='width:100%;border-collapse:collapse;margin-bottom:0;'>
          <thead>
            <tr style='background:#f5f5f5;'>
              <th style='padding:6px 12px;border:1px solid #e0e0e0;text-align:left;'>Subject</th>
              <th style='padding:6px 12px;border:1px solid #e0e0e0;text-align:center;'>Score</th>
              <th style='padding:6px 12px;border:1px solid #e0e0e0;text-align:center;'>Percentage</th>
            </tr>
          </thead>
          <tbody>
            ${subjectRows}
          </tbody>
        </table>
      </div>
      <div style='margin-top:32px;text-align:center;font-size:12px;color:#888;'>Generated by Sawla SMIS</div>
    </div>
  `;
  const printWindow = window.open('', '', 'width=900,height=1000');
  if (!printWindow) return;
  printWindow.document.write(`
    <html><head><title>Student Report</title>
    <style>
      @media print {
        body { background: #fff !important; }
        div[style*='box-shadow'] { box-shadow: none !important; }
      }
    </style>
    </head><body style='background:#f5f7fa;font-family:sans-serif;'>
      ${content}
      <script>window.onload = function() { window.print(); }</script>
    </body></html>
  `);
  printWindow.document.close();
};
// Add at the top, after other imports
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
// Helper to get letter grade (moved above PDF export helper)
// Helper to get letter grade (single definition at top-level)
function getLetterGrade(percentage: number): string {
  if (percentage >= 90) return 'A';
  if (percentage >= 85) return 'A-';
  if (percentage >= 80) return 'B+';
  if (percentage >= 75) return 'B';
  if (percentage >= 70) return 'B-';
  if (percentage >= 65) return 'C+';
  if (percentage >= 60) return 'C';
  if (percentage >= 55) return 'C-';
  if (percentage >= 50) return 'D';
  return 'F';
}

// Helper to save all student reports as PDFs (one PDF per student)
const handleBatchSaveStudentReportsAsPDF = async (students, grade, section, className, allSubjects, rankedStudents) => {
  const schoolName = "Sawla International School";
  for (const student of students) {
    const studentRanked = rankedStudents.find(s => s.id === student.id);
    let subjectRows = '';
    allSubjects.forEach(subject => {
      const subj = student.subjectMap[subject];
      subjectRows += `<tr><td style='padding:4px 8px;border:1px solid #ccc;'>${subject}</td><td style='padding:4px 8px;border:1px solid #ccc;'>${subj ? subj.totalEarned : ''} / ${subj ? subj.totalPossible : ''}</td><td style='padding:4px 8px;border:1px solid #ccc;'>${subj && subj.totalPossible > 0 ? ((subj.totalEarned / subj.totalPossible) * 100).toFixed(1) + '%' : ''}</td></tr>`;
    });
    // Percentile calculation
    const avgs = rankedStudents.map(s => s.avg).sort((a, b) => a - b);
    let percentile = '100';
    if (avgs.length > 1) {
      const below = avgs.filter(a => a < student.avg).length;
      const equal = avgs.filter(a => a === student.avg).length;
      percentile = (((below + 0.5 * equal) / avgs.length) * 100).toFixed(1);
    }
    // Create a hidden div for rendering
    const container = document.createElement('div');
    container.style.position = 'fixed';
    container.style.left = '-9999px';
    container.innerHTML = `
      <div style='width:700px;padding:24px;font-family:sans-serif;background:#fff;'>
      <h2 style='text-align:center;'>${schoolName}</h2>
      <h3 style='text-align:center;'>Student Academic Report</h3>
      <table style='margin:0 auto 16px auto;'>
        <tr><td><b>Name:</b></td><td>${student.firstName} ${student.lastName}</td></tr>
        <tr><td><b>Email:</b></td><td>${student.email}</td></tr>
        <tr><td><b>Grade:</b></td><td>${grade}</td></tr>
        <tr><td><b>Section:</b></td><td>${section}</td></tr>
        <tr><td><b>Class:</b></td><td>${className}</td></tr>
        <tr><td><b>Date:</b></td><td>${new Date().toLocaleDateString()}</td></tr>
      </table>
      <h4>Subject Scores</h4>
      <table style='border-collapse:collapse;width:100%;margin-bottom:16px;'>
        <thead><tr style='background:#f0f0f0;'><th style='padding:4px 8px;border:1px solid #ccc;'>Subject</th><th style='padding:4px 8px;border:1px solid #ccc;'>Score</th><th style='padding:4px 8px;border:1px solid #ccc;'>Percentage</th></tr></thead>
        <tbody>${subjectRows}</tbody>
      </table>
      <table style='margin:0 auto 16px auto;'>
        <tr><td><b>Total Score:</b></td><td>${student.totalEarned} / ${student.totalPossible}</td></tr>
        <tr><td><b>Average (%):</b></td><td>${student.avg.toFixed(1)}%</td></tr>
        <tr><td><b>Rank:</b></td><td>${studentRanked ? studentRanked.rank : ''}</td></tr>
        <tr><td><b>Percentile:</b></td><td>${percentile}</td></tr>
        <tr><td><b>Grade:</b></td><td>${getLetterGrade(student.avg)}</td></tr>
      </table>
      <div style='margin-top:24px;text-align:center;font-size:12px;color:#888;'>Generated by Sawla SMIS</div>
      </div>
    `;
    document.body.appendChild(container);
    // Wait for DOM to render
    await new Promise(res => setTimeout(res, 100));
    const element = container.firstElementChild;
    if (element) {
      const canvas = await html2canvas(element as HTMLElement, { scale: 2 });
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF({ orientation: 'portrait', unit: 'pt', format: 'a4' });
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      // Fit image to page
      const imgProps = { width: canvas.width, height: canvas.height };
      let pdfWidth = pageWidth - 40;
      let pdfHeight = (imgProps.height * pdfWidth) / imgProps.width;
      if (pdfHeight > pageHeight - 40) {
        pdfHeight = pageHeight - 40;
        pdfWidth = (imgProps.width * pdfHeight) / imgProps.height;
      }
      pdf.addImage(imgData, 'PNG', 20, 20, pdfWidth, pdfHeight);
      pdf.save(`Student_Report_${student.firstName}_${student.lastName}.pdf`);
    }
    document.body.removeChild(container);
  }
};
import { useState, useEffect } from 'react';
import * as XLSX from 'xlsx';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Dialog, DialogContent, DialogHeader, DialogTitle } from '@/components/ui/dialog';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Textarea } from '@/components/ui/textarea';
import { BookOpen, Plus, Edit, Trash2, FileText, Award, BarChart3 } from 'lucide-react';
import { toast } from 'sonner';
import { GradeManagement } from '@/components/academics/GradeManagement';
import React from 'react';
import { AcademicYearManagement } from '@/components/academics/AcademicYearManagement';
import { getSubjects, getGrades, getExams, getClasses, getStudentsByClass, createSubject, updateSubject, deleteSubject, createGrade, updateGrade, deleteGrade, createExam, updateExam, deleteExam, getAcademicYears } from '@/lib/api';

interface Subject {
  id: string;
  name: string;
  code: string;
  grade: string;
  credits: number;
  teacher: string;
  teacherId: string;
  description?: string;
}

interface Grade {
  id: string;
  studentId: string;
  studentName: string;
  subjectId: string;
  subjectName: string;
  examType: 'quiz' | 'midterm' | 'final' | 'assignment';
  score: number;
  maxScore: number;
  percentage: number;
  grade: string;
  date: string;
  semester: string;
  academicYear?: string; // <-- Add this property for filtering
  remarks?: string;
  className?: string;
  gradeLevel?: string;
  section?: string;
}

interface Exam {
  id: string;
  title: string;
  subjectId: string;
  subjectName: string;
  grade: string;
  section: string;
  type: 'quiz' | 'midterm' | 'final' | 'assignment';
  date: string;
  duration: number;
  maxScore: number;
  status: 'scheduled' | 'ongoing' | 'completed';
  instructions?: string;
}

export const AcademicManagement = () => {
  // Filter state for admin
  const [selectedAcademicYear, setSelectedAcademicYear] = useState<string>('');
  const [selectedSemester, setSelectedSemester] = useState<string>('');
  const [selectedGrade, setSelectedGrade] = useState<string>('');
  // Academic years and semesters state from backend
  const [academicYears, setAcademicYears] = useState<{ id: string; name: string }[]>([]);
  const [semesters, setSemesters] = useState<{ id: string; name: string }[]>([]);
  // Export a single section to Excel, including subject-wise scores
  const exportSectionToExcel = (grade: string, section: string, className: string, students: any[]) => {
    const getStudentGrades = (studentId: string) => grades.filter(g => g.studentId === studentId);
    const studentsWithAvg = students.map((student: any) => {
      const studentGrades = getStudentGrades(student.id);
      const totalEarned = studentGrades.reduce((sum, g) => sum + (g.score || 0), 0);
      const totalPossible = studentGrades.reduce((sum, g) => sum + (g.maxScore || 0), 0);
      const avg = totalPossible > 0 ? (totalEarned / totalPossible) * 100 : 0;
      // Subject-wise breakdown
      const subjectMap: Record<string, { totalEarned: number; totalPossible: number }> = {};
      studentGrades.forEach(g => {
        if (!subjectMap[g.subjectName]) subjectMap[g.subjectName] = { totalEarned: 0, totalPossible: 0 };
        subjectMap[g.subjectName].totalEarned += g.score || 0;
        subjectMap[g.subjectName].totalPossible += g.maxScore || 0;
      });
      return { ...student, totalEarned, totalPossible, avg, subjectMap };
    });
    studentsWithAvg.sort((a, b) => b.avg - a.avg || a.firstName.localeCompare(b.firstName));
    let lastAvg = null;
    let lastRank = 0;
    let actualRank = 0;
    const rankedStudents = studentsWithAvg.map((student) => {
      actualRank++;
      if (lastAvg === student.avg) {
        return { ...student, rank: lastRank };
      } else {
        lastAvg = student.avg;
        lastRank = actualRank;
        return { ...student, rank: lastRank };
      }
    });
    // Main summary rows
    // Collect all unique subjects for this section for consistent column order
    const allSubjects = Array.from(new Set(rankedStudents.flatMap(s => Object.keys(s.subjectMap))));
    // Calculate percentiles for the class
    const avgs = rankedStudents.map(s => s.avg).sort((a, b) => a - b);
    const getPercentile = (avg: number) => {
      if (avgs.length === 1) return 100;
      const below = avgs.filter(a => a < avg).length;
      const equal = avgs.filter(a => a === avg).length;
      // Percentile rank: percentage of scores below this one, plus half of those equal
      return (((below + 0.5 * equal) / avgs.length) * 100).toFixed(1);
    };
    const rows = rankedStudents.map(student => {
      const row: any = {
        Grade: grade,
        Section: section,
        Class: className,
        Student: `${student.firstName} ${student.lastName}`,
        Email: student.email
      };
      // Add subject-wise scores first
      allSubjects.forEach(subject => {
        row[`Subject: ${subject} Score`] = student.subjectMap[subject]
          ? `${student.subjectMap[subject].totalEarned} / ${student.subjectMap[subject].totalPossible}`
          : '';
      });
      // Then total score, average, percentage, rank, percentile, grade letter
      row['Total Score'] = `${student.totalEarned} / ${student.totalPossible}`;
      row['Average (%)'] = student.avg.toFixed(1);
      row['Percentage'] = student.totalPossible > 0 ? ((student.totalEarned / student.totalPossible) * 100).toFixed(1) + '%': '';
      row['Percentile'] = getPercentile(student.avg);
      row['Rank'] = student.rank;
      row['GradeLetter'] = getLetterGrade(student.avg);
      return row;
    });
    const ws = XLSX.utils.json_to_sheet(rows);
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, `${grade} ${section}`);
    XLSX.writeFile(wb, `student_summary_${grade}_${section}.xlsx`);
  };

  // Export all classes/sections to Excel (all summaries in one file, each section as a sheet)
  const exportAllSectionsToExcel = () => {
    // Rebuild gradeSectionMap fresh from classStudentMap to ensure all data is included
    const gradeSectionMap: Record<string, Record<string, { className: string; students: any[] }>> = {};
    Object.values(classStudentMap).forEach((cls: any) => {
      const grade = cls.grade?.name || 'Unknown Grade';
      const section = cls.section?.name || 'Unknown Section';
      if (!gradeSectionMap[grade]) gradeSectionMap[grade] = {};
      if (!gradeSectionMap[grade][section]) gradeSectionMap[grade][section] = { className: cls.name, students: [] };
      gradeSectionMap[grade][section].students = (cls.students || []); // Overwrite, not push, to avoid duplicates
    });
    const wb = XLSX.utils.book_new();
    Object.entries(gradeSectionMap).forEach(([grade, sectionMap]) => {
      Object.entries(sectionMap).forEach(([section, { className, students }]) => {
        const getStudentGrades = (studentId: string) => grades.filter(g => g.studentId === studentId);
        const studentsWithAvg = students.map((student: any) => {
          const studentGrades = getStudentGrades(student.id);
          const totalEarned = studentGrades.reduce((sum, g) => sum + (g.score || 0), 0);
          const totalPossible = studentGrades.reduce((sum, g) => sum + (g.maxScore || 0), 0);
          const avg = totalPossible > 0 ? (totalEarned / totalPossible) * 100 : 0;
          // Subject-wise breakdown
          const subjectMap: Record<string, { totalEarned: number; totalPossible: number }> = {};
          studentGrades.forEach(g => {
            if (!subjectMap[g.subjectName]) subjectMap[g.subjectName] = { totalEarned: 0, totalPossible: 0 };
            subjectMap[g.subjectName].totalEarned += g.score || 0;
            subjectMap[g.subjectName].totalPossible += g.maxScore || 0;
          });
          return { ...student, totalEarned, totalPossible, avg, subjectMap };
        });
        studentsWithAvg.sort((a, b) => b.avg - a.avg || a.firstName.localeCompare(b.firstName));
        let lastAvg = null;
        let lastRank = 0;
        let actualRank = 0;
        const rankedStudents = studentsWithAvg.map((student) => {
          actualRank++;
          if (lastAvg === student.avg) {
            return { ...student, rank: lastRank };
          } else {
            lastAvg = student.avg;
            lastRank = actualRank;
            return { ...student, rank: lastRank };
          }
        });
        // Collect all unique subjects for this section for consistent column order
        const allSubjects = Array.from(new Set(rankedStudents.flatMap(s => Object.keys(s.subjectMap))));
        // Calculate percentiles for the class
        const avgs = rankedStudents.map(s => s.avg).sort((a, b) => a - b);
        const getPercentile = (avg: number) => {
          if (avgs.length === 1) return 100;
          const below = avgs.filter(a => a < avg).length;
          const equal = avgs.filter(a => a === avg).length;
          const total = below + equal;
          return total > 0 ? ((below + 0.5 * equal) / avgs.length * 100).toFixed(1) : '0.0';
        };
        const rows = rankedStudents.map(student => {
          const row: any = {
            Grade: grade,
            Section: section,
            Class: className,
            Student: `${student.firstName} ${student.lastName}`,
            Email: student.email
          };
          allSubjects.forEach(subject => {
            row[`Subject: ${subject} Score`] = student.subjectMap[subject]
              ? `${student.subjectMap[subject].totalEarned} / ${student.subjectMap[subject].totalPossible}`
              : '';
          });
          row['Total Score'] = `${student.totalEarned} / ${student.totalPossible}`;
          row['Average (%)'] = student.avg.toFixed(1);
          row['Percentage'] = student.totalPossible > 0 ? ((student.totalEarned / student.totalPossible) * 100).toFixed(1) + '%': '';
          row['Percentile'] = getPercentile(student.avg);
          row['Rank'] = student.rank;
          row['GradeLetter'] = getLetterGrade(student.avg);
          return row;
        });
        const ws = XLSX.utils.json_to_sheet(rows);
        XLSX.utils.book_append_sheet(wb, ws, `${grade} ${section}`);
      });
    });
    XLSX.writeFile(wb, 'student_summary_all_classes.xlsx');
  };
  // Helper to print all student reports for a section in one window, each on a new page
  const handleBatchPrintStudentReports = (students, grade, section, className, allSubjects, rankedStudents) => {
    const schoolName = "Sawla International School";
    let content = '';
    students.forEach(student => {
      const studentRanked = rankedStudents.find(s => s.id === student.id);
      let subjectRows = '';
      allSubjects.forEach(subject => {
        const subj = student.subjectMap[subject];
        subjectRows += `<tr>
          <td style='padding:8px 12px;border:1px solid #e5e7eb;background:#f9fafb;'>${subject}</td>
          <td style='padding:8px 12px;border:1px solid #e5e7eb;'>${subj ? subj.totalEarned : ''} / ${subj ? subj.totalPossible : ''}</td>
          <td style='padding:8px 12px;border:1px solid #e5e7eb;'>${subj && subj.totalPossible > 0 ? ((subj.totalEarned / subj.totalPossible) * 100).toFixed(1) + '%' : ''}</td>
        </tr>`;
      });
      // Percentile calculation
      const avgs = rankedStudents.map(s => s.avg).sort((a, b) => a - b);
      let percentile = '100';
      if (avgs.length > 1) {
        const below = avgs.filter(a => a < student.avg).length;
        const equal = avgs.filter(a => a === student.avg).length;
        percentile = (((below + 0.5 * equal) / avgs.length) * 100).toFixed(1);
      }
      content += `
        <div style='page-break-after: always; padding: 32px 0; width: 800px; margin: 0 auto;'>
          <div style='display: flex; align-items: center; justify-content: center; margin-bottom: 16px;'>
            <img src='https://i.ibb.co/6b8n6kK/sawla-logo.png' alt='School Logo' style='height: 60px; margin-right: 16px;' onerror="this.style.display='none'" />
            <div>
              <h2 style='margin:0;font-size:2rem;font-weight:700;color:#1e293b;text-align:left;'>${schoolName}</h2>
              <div style='font-size:1.1rem;color:#64748b;text-align:left;'>Student Academic Report</div>
            </div>
          </div>
          <div style='display: flex; gap: 32px; margin-bottom: 24px;'>
            <div style='flex:1;'>
              <table style='width:100%;border-collapse:collapse;'>
                <tr><td style='font-weight:600;color:#334155;padding:6px 0;'>Name:</td><td style='padding:6px 0;'>${student.firstName} ${student.lastName}</td></tr>
                <tr><td style='font-weight:600;color:#334155;padding:6px 0;'>Email:</td><td style='padding:6px 0;'>${student.email}</td></tr>
                <tr><td style='font-weight:600;color:#334155;padding:6px 0;'>Grade:</td><td style='padding:6px 0;'>${grade}</td></tr>
                <tr><td style='font-weight:600;color:#334155;padding:6px 0;'>Section:</td><td style='padding:6px 0;'>${section}</td></tr>
                <tr><td style='font-weight:600;color:#334155;padding:6px 0;'>Class:</td><td style='padding:6px 0;'>${className}</td></tr>
              </table>
            </div>
            <div style='flex:1;'>
              <table style='width:100%;border-collapse:collapse;'>
                <tr><td style='font-weight:600;color:#334155;padding:6px 0;'>Date:</td><td style='padding:6px 0;'>${new Date().toLocaleDateString()}</td></tr>
                <tr><td style='font-weight:600;color:#334155;padding:6px 0;'>Rank:</td><td style='padding:6px 0;'>${studentRanked ? studentRanked.rank : ''}</td></tr>
                <tr><td style='font-weight:600;color:#334155;padding:6px 0;'>Percentile:</td><td style='padding:6px 0;'>${percentile}</td></tr>
                <tr><td style='font-weight:600;color:#334155;padding:6px 0;'>Grade Letter:</td><td style='padding:6px 0;'>${getLetterGrade(student.avg)}</td></tr>
              </table>
            </div>
          </div>
          <div style='margin-bottom: 24px;'>
            <h4 style='margin:0 0 8px 0;font-size:1.1rem;color:#1e293b;'>Subject Scores</h4>
            <table style='border-collapse:collapse;width:100%;box-shadow:0 1px 4px #e5e7eb;'>
              <thead>
                <tr style='background:#f1f5f9;'>
                  <th style='padding:8px 12px;border:1px solid #e5e7eb;text-align:left;'>Subject</th>
                  <th style='padding:8px 12px;border:1px solid #e5e7eb;text-align:left;'>Score</th>
                  <th style='padding:8px 12px;border:1px solid #e5e7eb;text-align:left;'>Percentage</th>
                </tr>
              </thead>
              <tbody>${subjectRows}</tbody>
            </table>
          </div>
          <div style='display: flex; gap: 32px;'>
            <div style='flex:1;'>
              <table style='width:100%;border-collapse:collapse;'>
                <tr><td style='font-weight:600;color:#334155;padding:6px 0;'>Total Score:</td><td style='padding:6px 0;'>${student.totalEarned} / ${student.totalPossible}</td></tr>
                <tr><td style='font-weight:600;color:#334155;padding:6px 0;'>Average (%):</td><td style='padding:6px 0;'>${student.avg.toFixed(1)}%</td></tr>
              </table>
            </div>
            <div style='flex:1;'>
              <table style='width:100%;border-collapse:collapse;'>
                <tr><td style='font-weight:600;color:#334155;padding:6px 0;'>Academic Year:</td><td style='padding:6px 0;'>${student.academicYear || '-'}</td></tr>
                <tr><td style='font-weight:600;color:#334155;padding:6px 0;'>Semester:</td><td style='padding:6px 0;'>${student.semester || '-'}</td></tr>
              </table>
            </div>
          </div>
          <div style='margin-top:32px;text-align:center;font-size:12px;color:#888;'>Generated by Sawla SMIS</div>
        </div>
      `;
    });
    const printWindow = window.open('', '', 'width=900,height=1000');
    if (!printWindow) return;
    printWindow.document.write(`
      <html><head><title>All Student Reports</title>
      <style>
        @media print { div[style*='page-break-after'] { page-break-after: always; } }
        body { background: #f8fafc; }
      </style>
      </head><body style='font-family:sans-serif;background:#f8fafc;'>
        ${content}
        <script>window.onload = function() { window.print(); }</script>
      </body></html>
    `);
    printWindow.document.close();
  };

  // Fetch academic years and semesters from backend
  useEffect(() => {
    const fetchAcademicYears = async () => {
      try {
        const years = await getAcademicYears();
        setAcademicYears(years);
        // Set semesters from selected academic year object
        if (selectedAcademicYear) {
          const yearObj = years.find((y: any) => y.id === selectedAcademicYear);
          setSemesters(yearObj?.semesters || []);
        } else {
          setSemesters([]);
        }
      } catch (e) {
        setAcademicYears([]);
        setSemesters([]);
      }
    };
    fetchAcademicYears();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedAcademicYear]);

  // Helper to render the admin summary with ranking and filtering
  const renderAdminSummary = () => {
    // Organize by grade and section using classStudentMap
    const gradeSectionMap: Record<string, Record<string, { className: string; students: any[] }>> = {};
    Object.values(classStudentMap).forEach((cls: any) => {
      const grade = cls.grade?.name || 'Unknown Grade';
      const section = cls.section?.name || 'Unknown Section';
      if (!gradeSectionMap[grade]) gradeSectionMap[grade] = {};
      if (!gradeSectionMap[grade][section]) gradeSectionMap[grade][section] = { className: cls.name, students: [] };
      // Filter by grade if selected
      if (selectedGrade && grade !== selectedGrade) return;
      gradeSectionMap[grade][section].students.push(...(cls.students || []));
    });

    // Helper: get all grades for a student, filtered by academic year and semester if selected
    const getStudentGrades = (studentId: string) => {
      return grades.filter(g => {
        if (g.studentId !== studentId) return false;
        if (selectedAcademicYear && g.academicYear !== selectedAcademicYear) return false;
        // Allow semester filter to match by ID or name for robustness
        if (selectedSemester) {
          // g.semester may be ID or name, selectedSemester is always ID
          if (g.semester !== selectedSemester) {
            // Try to match by name if possible
            const semObj = semesters.find(s => s.id === selectedSemester);
            if (!semObj || g.semester !== semObj.name) {
              return false;
            }
          }
        }
        return true;
      });
    };

    if (Object.keys(gradeSectionMap).length === 0) {
      return <div className="text-gray-500">No student/class data available.</div>;
    }

    return (
      <div className="space-y-8">
        <div className="flex flex-wrap gap-4 items-end mb-2">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Academic Year</label>
            <select
              className="border rounded px-2 py-1 text-sm w-48"
              value={selectedAcademicYear}
              onChange={e => { setSelectedAcademicYear(e.target.value); setSelectedSemester(''); }}
            >
              <option value="">All</option>
              {academicYears && academicYears.length > 0
                ? academicYears.map(year => (
                    <option key={year.id} value={year.id}>{year.name}</option>
                  ))
                : null}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Semester</label>
            <select
              className="border rounded px-2 py-1 text-sm w-48"
              value={selectedSemester}
              onChange={e => setSelectedSemester(e.target.value)}
            >
              <option value="">All</option>
              {semesters && semesters.length > 0
                ? semesters.map(sem => (
                    <option key={sem.id} value={sem.id}>{sem.name}</option>
                  ))
                : null}
            </select>
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-1">Grade</label>
            <select
              className="border rounded px-2 py-1 text-sm"
              value={selectedGrade}
              onChange={e => setSelectedGrade(e.target.value)}
            >
              <option value="">All</option>
              {Object.keys(classStudentMap).map(cid => classStudentMap[cid]?.grade?.name).filter(Boolean).filter((v, i, a) => a.indexOf(v) === i).sort().map(grade => (
                <option key={grade} value={grade}>{grade}</option>
              ))}
            </select>
          </div>
          <Button onClick={exportAllSectionsToExcel} variant="outline" size="sm">
            Export All Classes to Excel
          </Button>
        </div>
        {Object.entries(gradeSectionMap).sort(([a], [b]) => a.localeCompare(b)).map(([grade, sectionMap]) => (
          <div key={grade} className="space-y-6">
            <h3 className="text-xl font-bold">{grade}</h3>
            {Object.entries(sectionMap).sort(([a], [b]) => a.localeCompare(b)).map(([section, { className, students }]) => {
              // Compute average for each student and sort for ranking
              // Use all students returned by the backend for the class (already filtered by academic year)
              const studentsWithAvg = students.map((student: any) => {
                const studentGrades = getStudentGrades(student.id);
                const totalEarned = studentGrades.reduce((sum, g) => sum + (g.score || 0), 0);
                const totalPossible = studentGrades.reduce((sum, g) => sum + (g.maxScore || 0), 0);
                const avg = totalPossible > 0 ? (totalEarned / totalPossible) * 100 : 0;
                // Subject-wise breakdown
                const subjectMap: Record<string, { totalEarned: number; totalPossible: number }> = {};
                studentGrades.forEach(g => {
                  if (!subjectMap[g.subjectName]) subjectMap[g.subjectName] = { totalEarned: 0, totalPossible: 0 };
                  subjectMap[g.subjectName].totalEarned += g.score || 0;
                  subjectMap[g.subjectName].totalPossible += g.maxScore || 0;
                });
                // Attach academicYear and semester for printout
                let academicYear = '';
                let semester = '';
                if (studentGrades.length > 0) {
                  academicYear = studentGrades[0].academicYear || '';
                  // Try to display semester name if possible
                  const semId = studentGrades[0].semester;
                  const semObj = semesters.find(s => s.id === semId);
                  semester = semObj ? semObj.name : semId || '';
                }
                return { ...student, totalEarned, totalPossible, avg, subjectMap, academicYear, semester };
              });
              // Sort by avg descending, then by name for tie-breaker
              studentsWithAvg.sort((a, b) => b.avg - a.avg || a.firstName.localeCompare(b.firstName));
              // Assign ranks with ties (same avg = same rank, skip numbers)
              let lastAvg = null;
              let lastRank = 0;
              let actualRank = 0;
              const rankedStudents = studentsWithAvg.map((student, idx) => {
                actualRank++;
                if (lastAvg === student.avg) {
                  // same as previous, same rank
                  return { ...student, rank: lastRank };
                } else {
                  lastAvg = student.avg;
                  lastRank = actualRank;
                  return { ...student, rank: lastRank };
                }
              });
              // Collect all unique subjects for this section for consistent print/export order
              const allSubjects = Array.from(new Set(rankedStudents.flatMap(s => Object.keys(s.subjectMap))));
              return (
                <div key={section} className="space-y-4 ml-4">
                  <div className="flex flex-wrap gap-2 justify-end mb-2">
                    <Button onClick={() => exportSectionToExcel(grade, section, className, rankedStudents)} variant="outline" size="sm">
                      Export to Excel
                    </Button>
                    <Button variant="outline" size="sm" onClick={() => handleBatchPrintStudentReports(rankedStudents, grade, section, className, allSubjects, rankedStudents)}>
                      Print All Student Reports
                    </Button>
                    <Button variant="outline" size="sm" onClick={() => handleBatchSaveStudentReportsAsPDF(rankedStudents, grade, section, className, allSubjects, rankedStudents)}>
                      Save All as PDF
                    </Button>
                  </div>
                  <h4 className="text-lg font-semibold">Section {section} ({className})</h4>
                  <div className="overflow-x-auto">
                    {/* Admin quick summary table: Name, Total, Average, Rank (no print button) */}
                    <div className="mb-4">
                      <h6 className="text-sm font-semibold mb-2">Quick Student Summary</h6>
                      <table className="w-full border">
                        <thead>
                          <tr className="bg-gray-50">
                            <th className="p-2 text-left border">Student</th>
                            <th className="p-2 text-left border">Total Score</th>
                            <th className="p-2 text-left border">Average (%)</th>
                            <th className="p-2 text-left border">Rank</th>
                          </tr>
                        </thead>
                        <tbody>
                          {rankedStudents.map(student => (
                            <tr key={student.id} className="border hover:bg-gray-50">
                              <td className="p-2 border">{student.firstName} {student.lastName}</td>
                              <td className="p-2 border">{student.totalEarned} / {student.totalPossible}</td>
                              <td className="p-2 border">{student.avg.toFixed(1)}%</td>
                              <td className="p-2 border">{student.rank}</td>
                            </tr>
                          ))}
                        </tbody>
                      </table>
                    </div>
                    <br/>
                    <h6 className="text-sm font-semibold mb-2">Detailed Student Summary</h6>
                    <div className="flex justify-end mb-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => printDetailedTable(rankedStudents, allSubjects, grade, section, className)}
                      >
                        Print Detailed Table
                      </Button>
                    </div>
                    <table className="w-full border">
                      <thead>
                        <tr className="bg-blue-100">
                          <th className="p-2 text-left border">Student</th>
                          <th className="p-2 text-left border">Email</th>
                          {/* Dynamically render subject columns: subject name as column */}
                          {allSubjects.map(subject => (
                            <th key={subject} className="p-2 text-left border">{subject}</th>
                          ))}
                          <th className="p-2 text-left border">Total Score</th>
                          <th className="p-2 text-left border">Average (%)</th>
                          <th className="p-2 text-left border">Rank</th>
                          <th className="p-2 text-left border">Print</th>
                        </tr>
                      </thead>
                      <tbody>
                        {rankedStudents.map((student) => (
                          <tr key={student.id} className="border hover:bg-gray-50">
                            <td className="p-2 border">{student.firstName} {student.lastName}</td>
                            <td className="p-2 border">{student.email}</td>
                            {allSubjects.map(subject => {
                              const subj = student.subjectMap[subject];
                              return (
                                <td key={subject} className="p-2 border">{subj ? `${subj.totalEarned} / ${subj.totalPossible}` : '-'}</td>
                              );
                            })}
                            <td className="p-2 border">{student.totalEarned} / {student.totalPossible}</td>
                            <td className="p-2 border">{student.avg.toFixed(1)}%</td>
                            <td className="p-2 border">{student.rank}</td>
                            <td className="p-2 border">
                              <Button
                                variant="outline"
                                size="sm"
                                title="Print Student Report"
                                onClick={() => handlePrintStudentReport(student, grade, section, className, allSubjects, rankedStudents)}
                                className="flex items-center gap-1"
                              >
                                <svg xmlns="http://www.w3.org/2000/svg" className="h-4 w-4" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 9V2h12v7M6 18H4a2 2 0 01-2-2v-5a2 2 0 012-2h16a2 2 0 012 2v5a2 2 0 01-2 2h-2m-6 0v4m0 0h4m-4 0H8" /></svg>
                                <span className="hidden md:inline">Print</span>
                              </Button>
                            </td>
                          </tr>
                        ))}
                      </tbody>
                    </table>
                  </div>
                </div>
              );
            })}
          </div>
        ))}
      </div>
    );
  };
  const { user } = useAuth();
  const [activeTab, setActiveTab] = useState('subjects');
  const [subjects, setSubjects] = useState<Subject[]>([]);
  const [grades, setGrades] = useState<Grade[]>([]);
  const [exams, setExams] = useState<Exam[]>([]);
  const [isDialogOpen, setIsDialogOpen] = useState(false);
  const [dialogType, setDialogType] = useState<'subject' | 'grade' | 'exam'>('subject');
  const [selectedItem, setSelectedItem] = useState<any>(null);
  const [isEditing, setIsEditing] = useState(false);
  const [classStudentMap, setClassStudentMap] = useState<any>({});

  const gradesList = ['grade-9', 'grade-10', 'grade-11', 'grade-12'];
  const sections = ['A', 'B', 'C'];
  // Removed duplicate semesters declaration to avoid redeclaration error

  // Replace mock data with real API calls
  useEffect(() => {
    const fetchData = async () => {
      try {
        const [subjects, gradesRaw, exams, classes] = await Promise.all([
          getSubjects(),
          getGrades(),
          getExams(),
          getClasses(),
        ]);
        setSubjects(subjects);
        setExams(exams);
        // Map backend grades to frontend shape, always use academicYear and semester as IDs
        const grades = gradesRaw.map((g: any) => {
          const score = g.pointsEarned ?? g.score ?? 0;
          const maxScore = g.totalPoints ?? g.maxScore ?? 0;
          const percentage = maxScore > 0 ? (score / maxScore) * 100 : 0;
          const gradeLevel = g.class?.grade?.name || (g.className ? g.className.split(' ')[0] : undefined);
          const section = g.class?.section?.name || (g.className ? g.className.split(' ')[1] : undefined);
          // Normalize academicYear to id string for filtering
          let academicYear = g.academicYear;
          if (!academicYear && g.semester && g.semester.academicYear) {
            academicYear = g.semester.academicYear;
          }
          let academicYearId = '';
          if (academicYear && typeof academicYear === 'object' && academicYear.id) {
            academicYearId = academicYear.id;
          } else if (typeof academicYear === 'string') {
            academicYearId = academicYear;
          }
          // Normalize semester to id string for filtering
          let semesterId = '';
          if (g.semester && typeof g.semester === 'object' && g.semester.id) {
            semesterId = g.semester.id;
          } else if (typeof g.semester === 'string') {
            semesterId = g.semester;
          }
          return {
            id: g.id,
            studentId: g.studentId,
            studentName: g.student ? `${g.student.firstName} ${g.student.lastName}` : '',
            subjectId: g.subjectId,
            subjectName: g.subject ? g.subject.name : '',
            examType: g.category ? g.category.name : '',
            score,
            maxScore,
            percentage,
            grade: getLetterGrade(percentage),
            date: g.date ? new Date(g.date).toLocaleDateString() : '',
            semester: semesterId,
            remarks: g.remarks || '',
            className: g.className,
            gradeLevel,
            section,
            classId: g.class?.id || g.classId,
            academicYear: academicYearId,
          };
        });
        setGrades(grades);

        // Fetch students for each class, filtered by selected academic year and semester if set
        const classStudentMap: any = {};
        await Promise.all(classes.map(async (cls: any) => {
          // Always pass academicYearId and semesterId if set
          const params: any = {};
          if (selectedAcademicYear) params.academicYearId = selectedAcademicYear;
          if (selectedSemester) params.semesterId = selectedSemester;
          const students = await getStudentsByClass(cls.id, Object.keys(params).length ? params : undefined);
          classStudentMap[cls.id] = {
            ...cls,
            students,
          };
        }));
        setClassStudentMap(classStudentMap);
      } catch (e) {
        toast.error('Failed to load academic data');
      }
    };
    fetchData();
    // Re-fetch students when academic year or semester filter changes
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedAcademicYear, selectedSemester]);

  // Print Detailed Table function (top-level, only one definition)
  // Updated: Print each student's detailed report individually (one per page, in a single print job)
  function printDetailedTable(rankedStudents: any[], allSubjects: string[], grade: string, section: string, className: string) {
    // Reuse the same layout as handlePrintStudentReport, but for all students, each on a new page
    const schoolName = "Sawla International School";
    let content = '';
    rankedStudents.forEach(student => {
      // Calculate percentile for this student
      const avgs = rankedStudents.map(s => s.avg).sort((a, b) => a - b);
      let percentile = '100';
      if (avgs.length > 1) {
        const below = avgs.filter(a => a < student.avg).length;
        const equal = avgs.filter(a => a === student.avg).length;
        percentile = (((below + 0.5 * equal) / avgs.length) * 100).toFixed(1);
      }
      // Student info block
      const infoRows = [
        { label: 'Name', value: `${student.firstName} ${student.lastName}` },
        { label: 'Email', value: student.email },
        { label: 'Grade', value: grade },
        { label: 'Section', value: section },
        { label: 'Class', value: className },
        { label: 'Academic Year', value: student.academicYear || '-' },
        { label: 'Semester', value: student.semester || '-' },
        { label: 'Date', value: new Date().toLocaleDateString() },
      ];
      // Subject scores table
      let subjectRows = '';
      allSubjects.forEach(subject => {
        const subj = student.subjectMap[subject];
        subjectRows += `<tr>
          <td style='padding:6px 12px;border:1px solid #e0e0e0;background:#f9fafb;'>${subject}</td>
          <td style='padding:6px 12px;border:1px solid #e0e0e0;text-align:center;'>${subj ? subj.totalEarned : ''} / ${subj ? subj.totalPossible : ''}</td>
          <td style='padding:6px 12px;border:1px solid #e0e0e0;text-align:center;'>${subj && subj.totalPossible > 0 ? ((subj.totalEarned / subj.totalPossible) * 100).toFixed(1) + '%' : ''}</td>
        </tr>`;
      });
      // Summary block
      const summaryRows = [
        { label: 'Total Score', value: `${student.totalEarned} / ${student.totalPossible}` },
        { label: 'Average (%)', value: `${student.avg.toFixed(1)}%` },
        { label: 'Rank', value: student.rank },
        { label: 'Percentile', value: percentile },
        { label: 'Grade', value: getLetterGrade(student.avg) },
      ];
      content += `
        <div style='max-width:700px;margin:32px auto;padding:32px 40px 32px 40px;background:#fff;border-radius:12px;box-shadow:0 2px 16px #0001;font-family:sans-serif;page-break-after: always;'>
          <div style='text-align:center;margin-bottom:24px;'>
            <h2 style='margin:0;font-size:2rem;font-weight:700;color:#1a237e;'>${schoolName}</h2>
            <h3 style='margin:0;font-size:1.2rem;font-weight:500;color:#333;'>Student Academic Report</h3>
          </div>
          <div style='display:flex;gap:32px;justify-content:space-between;flex-wrap:wrap;margin-bottom:32px;'>
            <div style='flex:1 1 220px;'>
              <h4 style='margin:0 0 8px 0;font-size:1.05rem;color:#1976d2;'>Student Information</h4>
              <table style='width:100%;border-collapse:collapse;'>
                ${infoRows.map(row => `<tr><td style='padding:4px 0 4px 0;color:#555;font-weight:500;width:120px;'>${row.label}:</td><td style='padding:4px 0 4px 0;color:#222;'>${row.value}</td></tr>`).join('')}
              </table>
            </div>
            <div style='flex:1 1 220px;'>
              <h4 style='margin:0 0 8px 0;font-size:1.05rem;color:#1976d2;'>Summary</h4>
              <table style='width:100%;border-collapse:collapse;'>
                ${summaryRows.map(row => `<tr><td style='padding:4px 0 4px 0;color:#555;font-weight:500;width:120px;'>${row.label}:</td><td style='padding:4px 0 4px 0;color:#222;'>${row.value}</td></tr>`).join('')}
              </table>
            </div>
          </div>
          <div style='margin-bottom:24px;'>
            <h4 style='margin:0 0 8px 0;font-size:1.05rem;color:#1976d2;'>Subject Scores</h4>
            <table style='width:100%;border-collapse:collapse;margin-bottom:0;'>
              <thead>
                <tr style='background:#f5f5f5;'>
                  <th style='padding:6px 12px;border:1px solid #e0e0e0;text-align:left;'>Subject</th>
                  <th style='padding:6px 12px;border:1px solid #e0e0e0;text-align:center;'>Score</th>
                  <th style='padding:6px 12px;border:1px solid #e0e0e0;text-align:center;'>Percentage</th>
                </tr>
              </thead>
              <tbody>
                ${subjectRows}
              </tbody>
            </table>
          </div>
          <div style='margin-top:32px;text-align:center;font-size:12px;color:#888;'>Generated by Sawla SMIS</div>
        </div>
      `;
    });
    const printWindow = window.open('', '', 'width=900,height=1000');
    if (!printWindow) return;
    printWindow.document.write(`
      <html><head><title>All Student Reports</title>
      <style>
        @media print {
          div[style*='page-break-after'] { page-break-after: always; }
          body { background: #fff !important; }
        }
      </style>
      </head><body style='background:#f5f7fa;font-family:sans-serif;'>
        ${content}
        <script>window.onload = function() { window.print(); }</script>
      </body></html>
    `);
    printWindow.document.close();
  }

  const handleCreate = (type: 'subject' | 'grade' | 'exam') => {
    setDialogType(type);
    setSelectedItem(null);
    setIsEditing(false);
    setIsDialogOpen(true);
  };

  const handleEdit = (type: 'subject' | 'grade' | 'exam', item: any) => {
    setDialogType(type);
    setSelectedItem(item);
    setIsEditing(true);
    setIsDialogOpen(true);
  };

  const handleDelete = (type: 'subject' | 'grade' | 'exam', id: string) => {
    switch (type) {
      case 'subject':
        setSubjects(subjects.filter(s => s.id !== id));
        break;
      case 'grade':
        setGrades(grades.filter(g => g.id !== id));
        break;
      case 'exam':
        setExams(exams.filter(e => e.id !== id));
        break;
    }
    toast.success(`${type} deleted successfully`);
  };

  const handleSave = async (type: 'subject' | 'grade' | 'exam', data: any) => {
    const newId = Date.now().toString();
    
    switch (type) {
      case 'subject':
        try {
          if (isEditing && selectedItem) {
            const updatedSubject = await updateSubject(selectedItem.id, data);
            setSubjects(subjects.map(s => s.id === updatedSubject.id ? updatedSubject : s));
          } else {
            const createdSubject = await createSubject({ id: newId, ...data });
            setSubjects([...subjects, createdSubject]);
          }
          toast.success(`Subject ${isEditing ? 'updated' : 'created'} successfully`);
        } catch (error) {
          toast.error('Failed to save subject');
        }
        break;
      case 'grade':
        const percentage = (data.score / data.maxScore) * 100;
        const gradeData = {
          ...data,
          percentage,
          grade: getLetterGrade(percentage),
        };
        try {
          if (isEditing && selectedItem) {
            const updatedGrade = await updateGrade(selectedItem.id, gradeData);
            setGrades(grades.map(g => g.id === updatedGrade.id ? updatedGrade : g));
          } else {
            const createdGrade = await createGrade({ id: newId, ...gradeData });
            setGrades([...grades, createdGrade]);
          }
          toast.success(`Grade ${isEditing ? 'updated' : 'created'} successfully`);
        } catch (error) {
          toast.error('Failed to save grade');
        }
        break;
      case 'exam':
        try {
          if (isEditing && selectedItem) {
            const updatedExam = await updateExam(selectedItem.id, data);
            setExams(exams.map(e => e.id === updatedExam.id ? updatedExam : e));
          } else {
            const createdExam = await createExam({ id: newId, ...data, status: 'scheduled' });
            setExams([...exams, createdExam]);
          }
          toast.success(`Exam ${isEditing ? 'updated' : 'created'} successfully`);
        } catch (error) {
          toast.error('Failed to save exam');
        }
        break;
    }
    
    setIsDialogOpen(false);
  };

  if (user?.role !== 'admin' && user?.role !== 'teacher') {
    return (
      <div className="p-6 text-center">
        <h1 className="text-2xl font-bold text-red-600">Access Denied</h1>
        <p className="text-gray-600 mt-2">You don't have permission to manage academics.</p>
      </div>
    );
  }

  return (
    <div className="p-6 space-y-6">
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Academic Management</h1>
          <p className="text-gray-600">Manage subjects, grades, and examinations</p>
        </div>
      </div>

      <Tabs value={activeTab} onValueChange={setActiveTab}>
        <TabsList className="grid w-full grid-cols-5">
          <TabsTrigger value="subjects">Subjects</TabsTrigger>
          <TabsTrigger value="grades">My Grades</TabsTrigger>
          <TabsTrigger value="all-grades">All Grades</TabsTrigger>
          <TabsTrigger value="exams">Examinations</TabsTrigger>
          <TabsTrigger value="academic-years">Academic Years</TabsTrigger>
        </TabsList>

        <TabsContent value="subjects" className="space-y-4">
          <div className="flex justify-between items-center">
            <h2 className="text-xl font-semibold">Subject Management</h2>
            <Button onClick={() => handleCreate('subject')}>
              <Plus className="w-4 h-4 mr-2" />
              Add Subject
            </Button>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {subjects.map((subject) => (
              <Card key={subject.id}>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <BookOpen className="w-5 h-5" />
                      <span>{subject.name}</span>
                    </div>
                    <Badge>{subject.code}</Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <p><strong>Grade:</strong> {subject.grade ? subject.grade.replace('-', ' ').toUpperCase() : 'N/A'}</p>
                    <p><strong>Credits:</strong> {subject.credits}</p>
                    <p><strong>Teacher:</strong> {subject.teacher}</p>
                    <p className="text-sm text-gray-600">{subject.description}</p>
                    <div className="flex space-x-2 mt-4">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleEdit('subject', subject)}
                      >
                        <Edit className="w-3 h-3" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleDelete('subject', subject.id)}
                        className="text-red-600"
                      >
                        <Trash2 className="w-3 h-3" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="grades" className="space-y-4">
          {/* Show Admin summary above GradeManagement for admin only (removed broken AdminStudentSummary) */}
          <GradeManagement />
        </TabsContent>

{/* // In your AcademicManagement component, update the all-grades tab content: */}
        <TabsContent value="all-grades" className="space-y-4">
          {user?.role === 'admin' && (
            <Card className="mb-6">
              <CardHeader>
                <CardTitle>Student Academic Summary</CardTitle>
              </CardHeader>
              <CardContent>
                {renderAdminSummary()}
              </CardContent>
            </Card>
          )}
        </TabsContent>

        <TabsContent value="exams" className="space-y-4">
          <div className="flex justify-between items-center">
            <h2 className="text-xl font-semibold">Examination Management</h2>
            <Button onClick={() => handleCreate('exam')}>
              <Plus className="w-4 h-4 mr-2" />
              Schedule Exam
            </Button>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {exams.map((exam) => (
              <Card key={exam.id}>
                <CardHeader>
                  <CardTitle className="flex items-center justify-between">
                    <div className="flex items-center space-x-2">
                      <FileText className="w-5 h-5" />
                      <span className="text-sm">{exam.title}</span>
                    </div>
                    <Badge variant={
                      exam.status === 'completed' ? 'default' :
                      exam.status === 'ongoing' ? 'secondary' : 'outline'
                    }>
                      {exam.status}
                    </Badge>
                  </CardTitle>
                </CardHeader>
                <CardContent>
                  <div className="space-y-2">
                    <p><strong>Subject:</strong> {exam.subjectName}</p>
                    <p><strong>Grade:</strong> {exam.grade.replace('-', ' ').toUpperCase()} - {exam.section}</p>
                    <p><strong>Type:</strong> {exam.type}</p>
                    <p><strong>Date:</strong> {exam.date}</p>
                    <p><strong>Duration:</strong> {exam.duration} minutes</p>
                    <p><strong>Max Score:</strong> {exam.maxScore}</p>
                    {exam.instructions && (
                      <p className="text-sm text-gray-600"><strong>Instructions:</strong> {exam.instructions}</p>
                    )}
                    <div className="flex space-x-2 mt-4">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleEdit('exam', exam)}
                      >
                        <Edit className="w-3 h-3" />
                      </Button>
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleDelete('exam', exam.id)}
                        className="text-red-600"
                      >
                        <Trash2 className="w-3 h-3" />
                      </Button>
                    </div>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </TabsContent>

        <TabsContent value="academic-years" className="space-y-4">
          <AcademicYearManagement />
        </TabsContent>
      </Tabs>

      <AcademicDialog
        isOpen={isDialogOpen}
        onClose={() => setIsDialogOpen(false)}
        type={dialogType}
        item={selectedItem}
        onSave={handleSave}
        isEditing={isEditing}
        subjects={subjects}
        gradesList={gradesList}
        sections={sections.map(s => typeof s === 'string' ? s : s.name)}
        semesters={semesters.map(s => s.name)}
      />
    </div>
  );
};

interface AcademicDialogProps {
  isOpen: boolean;
  onClose: () => void;
  type: 'subject' | 'grade' | 'exam';
  item: any;
  onSave: (type: 'subject' | 'grade' | 'exam', data: any) => void;
  isEditing: boolean;
  subjects: Subject[];
  gradesList: string[];
  sections: string[];
  semesters: string[];
}

const AcademicDialog = ({ isOpen, onClose, type, item, onSave, isEditing, subjects, gradesList, sections, semesters }: AcademicDialogProps) => {
  const [formData, setFormData] = useState<any>({});

  useEffect(() => {
    if (item) {
      setFormData(item);
    } else {
      setFormData({});
    }
  }, [item]);

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    onSave(type, formData);
    setFormData({});
  };

  const getDialogTitle = () => {
    const action = isEditing ? 'Edit' : 'Create';
    switch (type) {
      case 'subject': return `${action} Subject`;
      case 'grade': return `${action} Grade`;
      case 'exam': return `${action} Exam`;
      default: return action;
    }
  };

  return (
    <Dialog open={isOpen} onOpenChange={onClose}>
      <DialogContent className="max-w-md">
        <DialogHeader>
          <DialogTitle>{getDialogTitle()}</DialogTitle>
        </DialogHeader>
        <form onSubmit={handleSubmit} className="space-y-4">
          {type === 'subject' && (
            <>
              <div>
                <Label htmlFor="name">Subject Name</Label>
                <Input
                  id="name"
                  value={formData.name || ''}
                  onChange={(e) => setFormData({ ...formData, name: e.target.value })}
                  required
                />
              </div>
              <div>
                <Label htmlFor="code">Subject Code</Label>
                <Input
                  id="code"
                  value={formData.code || ''}
                  onChange={(e) => setFormData({ ...formData, code: e.target.value })}
                  required
                />
              </div>
              <div>
                <Label htmlFor="grade">Grade</Label>
                <Select
                  value={formData.grade || ''}
                  onValueChange={(value) => setFormData({ ...formData, grade: value })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select grade" />
                  </SelectTrigger>
                  <SelectContent>
                    {gradesList.map(grade => (
                      <SelectItem key={grade} value={grade}>
                        {grade.replace('-', ' ').toUpperCase()}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="credits">Credits</Label>
                <Input
                  id="credits"
                  type="number"
                  value={formData.credits || ''}
                  onChange={(e) => setFormData({ ...formData, credits: parseInt(e.target.value) })}
                  required
                />
              </div>
              <div>
                <Label htmlFor="description">Description</Label>
                <Textarea
                  id="description"
                  value={formData.description || ''}
                  onChange={(e) => setFormData({ ...formData, description: e.target.value })}
                />
              </div>
            </>
          )}

          {type === 'grade' && (
            <>
              <div>
                <Label htmlFor="studentName">Student Name</Label>
                <Input
                  id="studentName"
                  value={formData.studentName || ''}
                  onChange={(e) => setFormData({ ...formData, studentName: e.target.value })}
                  required
                />
              </div>
              <div>
                <Label htmlFor="subjectName">Subject</Label>
                <Select
                  value={formData.subjectId || ''}
                  onValueChange={(value) => {
                    const subject = subjects.find(s => s.id === value);
                    setFormData({ 
                      ...formData, 
                      subjectId: value,
                      subjectName: subject?.name || ''
                    });
                  }}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select subject" />
                  </SelectTrigger>
                  <SelectContent>
                    {subjects.map(subject => (
                      <SelectItem key={subject.id} value={subject.id}>
                        {subject.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div>
                <Label htmlFor="examType">Exam Type</Label>
                <Select
                  value={formData.examType || ''}
                  onValueChange={(value) => setFormData({ ...formData, examType: value })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select exam type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="quiz">Quiz</SelectItem>
                    <SelectItem value="midterm">Midterm</SelectItem>
                    <SelectItem value="final">Final</SelectItem>
                    <SelectItem value="assignment">Assignment</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="score">Score</Label>
                  <Input
                    id="score"
                    type="number"
                    value={formData.score || ''}
                    onChange={(e) => setFormData({ ...formData, score: parseInt(e.target.value) })}
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="maxScore">Max Score</Label>
                  <Input
                    id="maxScore"
                    type="number"
                    value={formData.maxScore || ''}
                    onChange={(e) => setFormData({ ...formData, maxScore: parseInt(e.target.value) })}
                    required
                  />
                </div>
              </div>
              <div>
                <Label htmlFor="date">Date</Label>
                <Input
                  id="date"
                  type="date"
                  value={formData.date || ''}
                  onChange={(e) => setFormData({ ...formData, date: e.target.value })}
                  required
                />
              </div>
            </>
          )}

          {type === 'exam' && (
            <>
              <div>
                <Label htmlFor="title">Exam Title</Label>
                <Input
                  id="title"
                  value={formData.title || ''}
                  onChange={(e) => setFormData({ ...formData, title: e.target.value })}
                  required
                />
              </div>
              <div>
                <Label htmlFor="subjectName">Subject</Label>
                <Select
                  value={formData.subjectId || ''}
                  onValueChange={(value) => {
                    const subject = subjects.find(s => s.id === value);
                    setFormData({ 
                      ...formData, 
                      subjectId: value,
                      subjectName: subject?.name || ''
                    });
                  }}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select subject" />
                  </SelectTrigger>
                  <SelectContent>
                    {subjects.map(subject => (
                      <SelectItem key={subject.id} value={subject.id}>
                        {subject.name}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="grade">Grade</Label>
                  <Select
                    value={formData.grade || ''}
                    onValueChange={(value) => setFormData({ ...formData, grade: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Grade" />
                    </SelectTrigger>
                    <SelectContent>
                      {gradesList.map(grade => (
                        <SelectItem key={grade} value={grade}>
                          {grade.replace('-', ' ').toUpperCase()}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div>
                  <Label htmlFor="section">Section</Label>
                  <Select
                    value={formData.section || ''}
                    onValueChange={(value) => setFormData({ ...formData, section: value })}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Section" />
                    </SelectTrigger>
                    <SelectContent>
                      {sections.map(section => (
                        <SelectItem key={section} value={section}>{section}</SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
              </div>
              <div>
                <Label htmlFor="type">Exam Type</Label>
                <Select
                  value={formData.type || ''}
                  onValueChange={(value) => setFormData({ ...formData, type: value })}
                >
                  <SelectTrigger>
                    <SelectValue placeholder="Select type" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="quiz">Quiz</SelectItem>
                    <SelectItem value="midterm">Midterm</SelectItem>
                    <SelectItem value="final">Final</SelectItem>
                    <SelectItem value="assignment">Assignment</SelectItem>
                  </SelectContent>
                </Select>
              </div>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <Label htmlFor="date">Date</Label>
                  <Input
                    id="date"
                    type="date"
                    value={formData.date || ''}
                    onChange={(e) => setFormData({ ...formData, date: e.target.value })}
                    required
                  />
                </div>
                <div>
                  <Label htmlFor="duration">Duration (minutes)</Label>
                  <Input
                    id="duration"
                    type="number"
                    value={formData.duration || ''}
                    onChange={(e) => setFormData({ ...formData, duration: parseInt(e.target.value) })}
                    required
                  />
                </div>
              </div>
              <div>
                <Label htmlFor="maxScore">Max Score</Label>
                <Input
                  id="maxScore"
                  type="number"
                  value={formData.maxScore || ''}
                  onChange={(e) => setFormData({ ...formData, maxScore: parseInt(e.target.value) })}
                  required
                />
              </div>
              <div>
                <Label htmlFor="instructions">Instructions</Label>
                <Textarea
                  id="instructions"
                  value={formData.instructions || ''}
                  onChange={(e) => setFormData({ ...formData, instructions: e.target.value })}
                />
              </div>
            </>
          )}

          <div className="flex justify-end space-x-2">
            <Button type="button" variant="outline" onClick={onClose}>
              Cancel
            </Button>
            <Button type="submit">
              {isEditing ? 'Update' : 'Create'}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};